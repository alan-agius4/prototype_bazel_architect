diff --git a/internal/npm_install/generate_build_file.js b/internal/npm_install/generate_build_file.js
index 86539769..2084078c 100644
--- a/internal/npm_install/generate_build_file.js
+++ b/internal/npm_install/generate_build_file.js
@@ -422,12 +422,15 @@ def _maybe(repo_rule, name, **kwargs):
             // Automatically include dynamic dependency on plugins of the form pkg-plugin-foo
             if (name.startsWith(`${p._moduleName}-plugin-`))
                 return true;
-            const value = dynamic_deps[p._moduleName];
-            if (name === value)
-                return true;
-            // Support wildcard match
-            if (value && value.includes('*') && name.startsWith(value.substring(0, value.indexOf('*')))) {
-                return true;
+            if (!dynamic_deps[p._moduleName])
+                return false;
+            for (const value of dynamic_deps[p._moduleName].split(',')) {
+                if (name === value)
+                    return true;
+                // Support wildcard match
+                if (value && value.includes('*') && name.startsWith(value.substring(0, value.indexOf('*')))) {
+                    return true;
+                }
             }
             return false;
         }
diff --git a/internal/node/node.bzl b/internal/node/node.bzl
index d53b2406..505dbafc 100644
--- a/internal/node/node.bzl
+++ b/internal/node/node.bzl
@@ -206,7 +206,8 @@ def _nodejs_binary_impl(ctx):
         "TEMPLATED_link_modules_script": _to_manifest_path(ctx, ctx.file._link_modules_script),
         "TEMPLATED_node": node_tool_info.target_tool_path,
         "TEMPLATED_repository_args": _to_manifest_path(ctx, ctx.file._repository_args),
-        "TEMPLATED_script_path": script_path,
+        # HACK HACK
+        "TEMPLATED_script_path": "node_modules/@angular-devkit/architect-cli/bin/architect.js"
     }
     ctx.actions.expand_template(
         template = ctx.file._launcher_template,
@@ -275,7 +276,7 @@ The set of default  environment variables is:
 - `DEBUG`: rules use this environment variable to turn on debug information in their output artifacts
 - `VERBOSE_LOGS`: rules use this environment variable to turn on debug output in their logs
 """,
-        default = ["DEBUG", "VERBOSE_LOGS"],
+        default = ["DEBUG", "VERBOSE_LOGS", "BAZEL_PATCH_MODULE_RESOLVE"],
     ),
     "entry_point": attr.label(
         doc = """The script which should be executed first, usually containing a main function.
diff --git a/internal/node/node_launcher.sh b/internal/node/node_launcher.sh
index e70f580d..03749eea 100644
--- a/internal/node/node_launcher.sh
+++ b/internal/node/node_launcher.sh
@@ -116,7 +116,7 @@ TEMPLATED_env_vars
 
 readonly node=$(rlocation "TEMPLATED_node")
 readonly repository_args=$(rlocation "TEMPLATED_repository_args")
-readonly script=$(rlocation "TEMPLATED_script_path")
+readonly script="TEMPLATED_script_path"
 readonly link_modules_script=$(rlocation "TEMPLATED_link_modules_script")
 
 source $repository_args
diff --git a/internal/node/node_loader.js b/internal/node/node_loader.js
index 922cfa31..0dae0bc8 100644
--- a/internal/node/node_loader.js
+++ b/internal/node/node_loader.js
@@ -359,7 +359,7 @@ function resolveRunfiles(parent, ...pathSegments) {
 }
 
 var originalResolveFilename = module.constructor._resolveFilename;
-module.constructor._resolveFilename = function(request, parent, isMain, options) {
+function newResolveFilename(request, parent, isMain, options) {
   const parentFilename = (parent && parent.filename) ? parent.filename : undefined;
   if (SILLY_VERBOSE) log_verbose(`resolve ${request} from ${parentFilename}`);
 
@@ -490,6 +490,10 @@ module.constructor._resolveFilename = function(request, parent, isMain, options)
   throw error;
 }
 
+if (!!process.env['BAZEL_PATCH_MODULE_RESOLVE']) {
+  module.constructor._resolveFilename = newResolveFilename;
+}
+
 // Before loading anything that might print a stack, install the
 // source-map-support.
 if (INSTALL_SOURCE_MAP_SUPPORT) {
